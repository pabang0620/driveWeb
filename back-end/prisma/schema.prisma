generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model boards {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  posts     posts[]
}

model comments {
  id             Int        @id @default(autoincrement())
  content        String     @db.Text
  postId         Int
  userId         Int
  createdAt      DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?  @default(now()) @db.Timestamp(0)
  parentId       Int?
  comments       comments?  @relation("commentsTocomments", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ParentComment")
  other_comments comments[] @relation("commentsTocomments")
  posts          posts      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_1")
  users          users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_2")

  @@index([parentId], map: "FK_ParentComment")
  @@index([postId], map: "FK_Post")
  @@index([userId], map: "FK_User")
}

model my_car {
  id                      Int       @id @default(autoincrement())
  userId                  Int
  vehicle_name            String?   @db.VarChar(255)
  fuel_type               String?   @db.VarChar(255)
  year                    Int?      @db.Year
  mileage                 Int?
  license_plate           String?   @db.VarChar(255)
  first_registration_date DateTime? @db.Date
  insurance_company       String?   @db.VarChar(255)
  insurance_period        DateTime? @db.Date
  insurance_fee           Decimal?  @db.Decimal(15, 2)
  created_at              DateTime? @default(now()) @db.Timestamp(0)
  updated_at              DateTime? @default(now()) @db.Timestamp(0)
  users                   users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "my_car_ibfk_1")

  @@index([userId], map: "userId")
}

model posts {
  id           Int          @id @default(autoincrement())
  title        String       @db.VarChar(255)
  content      String       @db.Text
  boardId      Int
  userId       Int
  imageUrl     String?      @db.VarChar(255)
  createdAt    DateTime?    @default(now()) @db.Timestamp(0)
  updatedAt    DateTime?    @default(now()) @db.Timestamp(0)
  viewCount    Int?         @default(0)
  likeCount    Int?         @default(0)
  order_number Int?
  comments     comments[]
  postImages   postImages[]
  boards       boards       @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_ibfk_1")
  users        users        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_ibfk_2")

  @@index([userId], map: "userId")
  @@index([boardId], map: "FK_Board")
}

model user_incomes {
  id                    Int       @id @default(autoincrement())
  userId                Int
  income_type           String?   @db.VarChar(255)
  start_date            DateTime? @db.Date
  region1               String?   @db.VarChar(255)
  region2               String?   @db.VarChar(255)
  monthly_payment       Decimal?  @db.Decimal(15, 2)
  fuel_allowance        Decimal?  @db.Decimal(15, 2)
  investment            Decimal?  @db.Decimal(15, 2)
  standard_expense_rate Decimal?  @db.Decimal(5, 2)
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
  users                 users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_incomes_ibfk_1")

  @@index([userId], map: "userId")
}

model user_profiles {
  id         Int       @id @default(autoincrement())
  userId     Int
  name       String?   @db.VarChar(255)
  birth_date String?   @db.VarChar(15)
  phone      String?   @db.VarChar(20)
  email      String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_profiles_ibfk_1")

  @@index([userId], map: "userId")
}

model user_vehicles {
  id               Int       @id @default(autoincrement())
  userId           Int
  taxi_type        String?   @db.VarChar(255)
  franchise_status String?   @db.VarChar(255)
  vehicle_name     String?   @db.VarChar(255)
  year             Int?      @db.Year
  fuel_type        String?   @db.VarChar(255)
  mileage          Int?
  commission_rate  Decimal?  @db.Decimal(5, 2)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  users            users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_vehicles_ibfk_1")

  @@index([userId], map: "userId")
}

model users {
  id             Int              @id @default(autoincrement())
  nickname       String           @db.VarChar(255)
  username       String           @unique(map: "email") @db.VarChar(255)
  password       String?          @db.VarChar(255)
  googleId       String?          @unique(map: "googleId") @db.VarChar(255)
  kakaoId        String?          @unique(map: "kakaoId") @db.VarChar(255)
  naverId        String?          @unique(map: "naverId") @db.VarChar(255)
  createdAt      DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?        @default(now()) @db.Timestamp(0)
  jobtype        Int?
  comments       comments[]
  driving_logs   driving_logs[]
  franchise_fees franchise_fees[]
  my_car         my_car[]
  posts          posts[]
  user_incomes   user_incomes[]
  user_profiles  user_profiles[]
  user_vehicles  user_vehicles[]
}

model driving_logs {
  id              Int               @id @default(autoincrement())
  userId          Int
  date            DateTime?         @db.Date
  memo            String?           @db.Text
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  users           users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "driving_logs_ibfk_1")
  driving_records driving_records[]
  expense_records expense_records[]
  income_records  income_records[]

  @@index([userId], map: "userId")
}

model driving_records {
  id                  Int           @id @default(autoincrement())
  driving_log_id      Int?
  start_time          DateTime?     @db.Time(0)
  end_time            DateTime?     @db.Time(0)
  working_hours       DateTime?     @db.Time(0)
  day_of_week         String?       @db.VarChar(10)
  cumulative_km       Int?
  driving_distance    Int?
  business_distance   Int?
  business_rate       Decimal?      @db.Decimal(5, 2)
  fuel_amount         Decimal?      @db.Decimal(10, 2)
  fuel_efficiency     Decimal?      @db.Decimal(10, 2)
  total_driving_cases Int?
  created_at          DateTime?     @default(now()) @db.Timestamp(0)
  updated_at          DateTime?     @default(now()) @db.Timestamp(0)
  driving_logs        driving_logs? @relation(fields: [driving_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "driving_records_ibfk_1")

  @@index([driving_log_id], map: "driving_log_id")
}

model expense_records {
  id             Int           @id @default(autoincrement())
  driving_log_id Int?
  fuel_expense   Decimal?      @db.Decimal(15, 2)
  toll_fee       Decimal?      @db.Decimal(15, 2)
  meal_expense   Decimal?      @db.Decimal(15, 2)
  fine_expense   Decimal?      @db.Decimal(15, 2)
  other_expense  Decimal?      @db.Decimal(15, 2)
  expense_spare1 Decimal?      @db.Decimal(15, 2)
  expense_spare2 Decimal?      @db.Decimal(15, 2)
  expense_spare3 Decimal?      @db.Decimal(15, 2)
  expense_spare4 Decimal?      @db.Decimal(15, 2)
  total_expense  Decimal?      @db.Decimal(15, 2)
  profit_loss    Decimal?      @db.Decimal(15, 2)
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  cardFee        Float?        @db.Float
  kakaoFee       Float?        @db.Float
  uberFee        Float?        @db.Float
  driving_logs   driving_logs? @relation(fields: [driving_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "expense_records_ibfk_1")

  @@index([driving_log_id], map: "driving_log_id")
}

model income_records {
  id                     Int           @id @default(autoincrement())
  driving_log_id         Int?
  card_income            Decimal?      @db.Decimal(15, 2)
  cash_income            Decimal?      @db.Decimal(15, 2)
  kakao_income           Decimal?      @db.Decimal(15, 2)
  uber_income            Decimal?      @db.Decimal(15, 2)
  onda_income            Decimal?      @db.Decimal(15, 2)
  tada_income            Decimal?      @db.Decimal(15, 2)
  other_income           Decimal?      @db.Decimal(15, 2)
  income_spare1          Decimal?      @db.Decimal(15, 2)
  income_spare2          Decimal?      @db.Decimal(15, 2)
  income_spare3          Decimal?      @db.Decimal(15, 2)
  income_spare4          Decimal?      @db.Decimal(15, 2)
  total_income           Decimal?      @db.Decimal(15, 2)
  income_per_km          Decimal?      @db.Decimal(10, 2)
  income_per_hour        Decimal?      @db.Decimal(10, 2)
  total_transport_income Decimal?      @db.Decimal(15, 2)
  created_at             DateTime?     @default(now()) @db.Timestamp(0)
  updated_at             DateTime?     @default(now()) @db.Timestamp(0)
  driving_logs           driving_logs? @relation(fields: [driving_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "income_records_ibfk_1")

  @@index([driving_log_id], map: "driving_log_id")
}

model franchise_fees {
  id             Int       @id @default(autoincrement())
  userId         Int?
  franchise_name String?   @db.VarChar(255)
  fee            Decimal?  @db.Decimal(15, 2)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
  users          users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "franchise_fees_ibfk_1")

  @@index([userId], map: "userId")
}

model postImages {
  id        Int       @id @default(autoincrement())
  postId    Int
  imageUrl  String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  posts     posts     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "postImages_ibfk_1")

  @@index([postId], map: "postId")
}

model likes {
  id        Int       @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime? @default(now()) @db.Timestamp(0)

  @@unique([userId, postId], map: "unique_likes")
}
